package pennapps.mootoo.co.driver;

import java.io.IOException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;

import com.mongodb.MongoClient;

import pennapps.mootoo.co.signals.SignalReceiver;

public class ServerDriver implements MqttCallback {

	private static final String BROKER_IP = "iot.mootoo.co";
	private static final String BROKER_URI = "tcp://" + BROKER_IP;
	
	
	private static String TOPIC;
	private static MqttClient client;

	private MongoClient clientInstance;
	
	/**
	 * There should only be one instance of MongoClient.
	 * This is true, even when multithreaded
	 */
	
	public static void main(String[] args) {
		ServerDriver sd = new ServerDriver();
		//If created, then connect
		sd.connect();
	}
	
	/*private static DBCollection checkConnection(String collection) throws UnknownHostException{
	    if(db == null){
	        db = (new MongoClient(host, port)).getDB(database);
	    }
	    return db.getCollection(collection);
	}*/
	
	private void connect() {
		try {
			//We can acccess the mac address through the NetworkInterface class
			NetworkInterface network;
			byte[] macAddress = null;
			try {
				network = NetworkInterface.getByInetAddress(InetAddress.getLocalHost());
				macAddress = network.getHardwareAddress();
			} catch (SocketException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			StringBuilder sb = new StringBuilder();
			for (int i = 0; i < macAddress.length; i++) {
				sb.append(String.format("%02X%s", macAddress[i], (i < macAddress.length - 1) ? "-" : ""));
			}
			String clientID = sb.toString();
			
			//Try creating client
			try {
				clientInstance = new MongoClient("mongo.mootoo.co");
				client = new MqttClient(BROKER_URI, clientID);
				System.out.println(clientID);
			} catch (MqttException ex) {
				ex.printStackTrace();
				System.exit(-1);
			}
			//Once a collection is made, can add stuff to collection
			InetAddress inet;
			
			 try {

			    inet = InetAddress.getByAddress(new byte[] { 127, 0, 0, 1 });
			    System.out.println("Sending Ping Request to " + inet);
				System.out.println(inet.isReachable(5000) ? "Localhost is reachable" : "Localhost is NOT reachable");
			} catch (IOException e) {
				e.printStackTrace();
			}
				
				client.connect();
				client.setCallback(this);
				System.out.println("Connected");
				client.subscribe("Room ID");
				System.out.println("tig bitties");
		} catch (MqttException e) {
			//If couldn't connect, try calling method again
			if (!client.isConnected()) {
				try {
					Thread.sleep(200);
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				//connect();
			}
			
			e.printStackTrace();
		} 
		
	}
	
	@Override
	public void connectionLost(Throwable exception) {
		
	}

	@Override
	public void deliveryComplete(IMqttDeliveryToken token) {
		try {
			System.out.println("Pub complete" + new String(token.getMessage().getPayload()));
		} catch (MqttException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void messageArrived(String topic, MqttMessage message) throws Exception {
		new Thread(new Runnable() {
			@Override
			public synchronized void run() {
				
				while (client.isConnected()) {
					TOPIC = topic;
					
					/*for (int tInd = 0; tInd < topic.length() - 1; tInd++) {
						int index = Integer.parseInt(topic.substring(tInd, tInd + 1));
								
						A While loop will happen here that will not run until
						* a connection has been received
						//TODO: Use this while implementing threads
						SignalReceiver signalReceiver = new SignalReceiver(typeSensor);
								
						if (wordAttribute != null) {
							signalReceiver.transmitSensorInfo(database, roomName, wordAttribute, clientInstance);
						} else {
							signalReceiver.transmitSensorInfo(database, roomName, binaryAttribute, clientInstance);
						}
								
					}
					*/
					
					String[] topicArray = topic.split("/");
					String database = topicArray[0];
					String roomName = topicArray[1];
					String typeSensor = topicArray[2];
					
					Double wordAttribute = null;
					Boolean binaryAttribute = null;
					
					if (topicArray[3].getClass() == String.class) {
						wordAttribute = Double.parseDouble(topicArray[3]);
					} else {
						binaryAttribute = Boolean.getBoolean(topicArray[3]);
					}

					InetAddress inet;
				
				    try {
						inet = InetAddress.getByName(BROKER_IP);
					    if (inet.isReachable(100)) {
					    	System.out.println("Host still reachable.");
					    }
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		}).start();
	}
	
}


