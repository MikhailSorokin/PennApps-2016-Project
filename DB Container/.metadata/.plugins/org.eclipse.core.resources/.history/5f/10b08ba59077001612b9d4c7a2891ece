package pennapps.mootoo.co.separate;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.bson.Document;
import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;

import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

public class MqttConnection implements MqttCallback {

	private static final String BROKER_IP = "iot.eclipse.org";
	private static final String BROKER_PORT = "1883";
	private static final String BROKER_URI = "tcp://" + BROKER_IP + ":" + BROKER_PORT;
	
	private static final String CLIENT_ID = "new";
	
	private static final String TOPIC = "pennapps_sensors/smash/temperature";
	
	private static MqttClient client;
	private static MqttConnectOptions options;
	
	private static MongoClient mongoClient;
	
	public enum Type {
	    Double, Boolean, String;
	}
	
	public static void main (String[] args) {
	    mongoClient = new MongoClient("localhost", 27017);
	    try {
	        client = new MqttClient(BROKER_URI, CLIENT_ID);
	    } catch (MqttException ex) {
	        Logger.getLogger(MqttConnection.class.getName()).log(Level.SEVERE, null, ex);
	    }
	    options = new MqttConnectOptions();
		options.setCleanSession(true);
		options.setKeepAliveInterval(30);
	    
		MqttConnection mqttConnection = new MqttConnection();
	    mqttConnection.connect();
	}
	
	public void connect() {
	    try {
	        client.setCallback(this);
	    	client.connect(options);
	        client.subscribe(TOPIC);
	        System.out.println("THEFUCL");
	    } catch (MqttException ex) {
	    	if (!client.isConnected()) {
	            try {
	                Thread.sleep(5000);
	            } catch (InterruptedException ex1) {
	                Logger.getLogger(MqttConnection.class.getName()).log(Level.SEVERE, null, ex1);
	            }
	            connect();
	        }
	    }
	}

	@Override
	public void connectionLost(Throwable arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void deliveryComplete(IMqttDeliveryToken arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void messageArrived(String arg0, MqttMessage arg1) throws Exception {
		// TODO Auto-generated method stub
		
	}
}