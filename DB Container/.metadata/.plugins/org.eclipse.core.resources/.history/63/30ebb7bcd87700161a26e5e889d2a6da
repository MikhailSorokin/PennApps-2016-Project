package pennapps.mootoo.co.driver;

import java.io.IOException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;

import com.mongodb.MongoClient;

import pennapps.mootoo.co.signals.SignalReceiver;

public class ServerDriver implements MqttCallback {

	private static final String BROKER_IP = "iot.mootoo.co";
	private static final String BROKER_URI = "tcp://" + BROKER_IP;
	
	private static String TOPIC = null;
	
	private static MqttClient client;
	
	private MongoClient clientInstance;
	
	/**
	 * There should only be one instance of MongoClient.
	 * This is true, even when multithreaded
	 */
	
	public static void main(String[] args) {
		ServerDriver sd = new ServerDriver();
		//If created, then connect
		sd.connect();
	}
	
	/*private static DBCollection checkConnection(String collection) throws UnknownHostException{
	    if(db == null){
	        db = (new MongoClient(host, port)).getDB(database);
	    }
	    return db.getCollection(collection);
	}*/
	
	private void connect() {
		try {
			//We can acccess the mac address through the NetworkInterface class
			NetworkInterface network;
			byte[] macAddress = null;
			try {
				network = NetworkInterface.getByInetAddress(InetAddress.getLocalHost());
				macAddress = network.getHardwareAddress();
			} catch (SocketException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (UnknownHostException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			StringBuilder sb = new StringBuilder();
			for (int i = 0; i < macAddress.length; i++) {
				sb.append(String.format("%02X%s", macAddress[i], (i < macAddress.length - 1) ? "-" : ""));
			}
			String clientID = sb.toString();
			
			//Try creating client
			try {
				clientInstance = new MongoClient("mongo.mootoo.co");
				client = new MqttClient(BROKER_URI, clientID);
			} catch (MqttException ex) {
				ex.printStackTrace();
				System.exit(-1);
			}
		
	}
	
	@Override
	public void connectionLost(Throwable exception) {
		
	}

	@Override
	public void deliveryComplete(IMqttDeliveryToken token) {
		try {
			System.out.println("Pub complete" + new String(token.getMessage().getPayload()));
		} catch (MqttException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void messageArrived(String topic, MqttMessage message) throws Exception {
		new Thread(new Runnable() {
			@Override
			public void run() {
				
				while (true) {
					String[] topicArray = topic.split("/");
					String database = topicArray[0];
					String roomName = topicArray[1];
					String typeSensor = topicArray[2];
					
					//Once a collection is made, can add stuff to collection
					InetAddress inet;
					
					 try {

					    inet = InetAddress.getByAddress(new byte[] { 127, 0, 0, 1 });
					    System.out.println("Sending Ping Request to " + inet);
						try {
							System.out.println(inet.isReachable(5000) ? "Host is reachable" : "Host is NOT reachable");
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						 
						inet = InetAddress.getByName(BROKER_IP);
						System.out.println("Sending Ping Request to " + inet);
						try {
							System.out.println(inet.isReachable(5000) ? "Host is reachable" : "Host is NOT reachable");
						} catch (IOException e) {
							e.printStackTrace();
						}
					} catch (UnknownHostException e) {
						e.printStackTrace();
					}
					} catch (MqttException e) {
						//If couldn't connect, try calling method again
						if (!client.isConnected()) {
							try {
								Thread.sleep(200);
							} catch (InterruptedException e1) {
								// TODO Auto-generated catch block
								e1.printStackTrace();
							}
							//connect();
						}
						
						e.printStackTrace();
					} 
					
					Double wordAttribute = null;
					Boolean binaryAttribute = null;
					
					if (topicArray[3].getClass() == String.class) {
						wordAttribute = Double.parseDouble(topicArray[3]);
					} else {
						binaryAttribute = Boolean.getBoolean(topicArray[3]);
					}
					
					TOPIC = topic;
					SignalReceiver signalReceiver = new SignalReceiver(typeSensor);
					
					/*A While loop will happen here that will not run until
					* a connection has been received*/
					//TODO: Use this while implementing threads
					
					if (wordAttribute != null) {
						signalReceiver.transmitSensorInfo(database, roomName, wordAttribute, clientInstance);
					} else {
						signalReceiver.transmitSensorInfo(database, roomName, binaryAttribute, clientInstance);
					}
					
					try {
						client.subscribe(TOPIC);
					} catch (MqttException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					MqttDeliveryToken token = null;
			    	try {
			    		// publish message to broker
						token = client.getTopic(topic).publish(message);
				    	// Wait until the message has been delivered to the broker
						token.waitForCompletion();
						Thread.sleep(100);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
			
		}).start();
	}
	
}


